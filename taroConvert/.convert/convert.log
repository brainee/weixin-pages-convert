INFO [taroize] parse - 入参 
option: {"json":"{\"pages\":[\"pages/index/index\",\"pages/logs/logs\"],\"window\":{\"navigationBarTextStyle\":\"black\",\"navigationStyle\":\"custom\"},\"style\":\"v2\",\"rendererOptions\":{\"skyline\":{\"defaultDisplayBlock\":true,\"disableABTest\":true,\"sdkVersionBegin\":\"3.0.0\",\"sdkVersionEnd\":\"15.255.255\"}},\"resolveAlias\":{\"config/*\":\"config/*\",\"services/*\":\"services/*\",\"model/*\":\"model/*\",\"utils/*\":\"utils/*\",\"components/*\":\"components/*\",\"tdesign-miniprogram/*\":\"miniprogram_npm/tdesign-miniprogram/*\"},\"componentFramework\":\"glass-easel\",\"sitemapLocation\":\"sitemap.json\",\"lazyCodeLoading\":\"requiredComponents\"}","script":"\"use strict\";\n// app.ts\nApp({\n    globalData: {},\n    onLaunch() {\n        // 展示本地存储能力\n        const logs = wx.getStorageSync('logs') || [];\n        logs.unshift(Date.now());\n        wx.setStorageSync('logs', logs);\n        // 登录\n        wx.login({\n            success: res => {\n                console.log(res.code);\n                // 发送 res.code 到后台换取 openId, sessionKey, unionId\n            },\n        });\n    },\n});\n","scriptPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js","path":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram","rootPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram","framework":"React","isApp":true,"logFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/.convert/convert.log"} 
INFO [taroize] parseWXML - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram 
parseImport: undefined 
INFO [taroize] parseScript - 入参 
scriptPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js 
INFO [taroize] parseCode - 入参
scriptPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js 
INFO [taroize] parseScript - 解析CallExpression 
App({
  globalData: {},
  onLaunch() {
    // 展示本地存储能力
    const logs = wx.getStorageSync('logs') || [];
    logs.unshift(Date.now());
    wx.setStorageSync('logs', logs);
    // 登录
    wx.login({
      success: res => {
        console.log(res.code);
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    });
  }
}) 
INFO [taroize] parsePage - 入参 
pagePath: App({
  globalData: {},
  onLaunch() {
    // 展示本地存储能力
    const logs = wx.getStorageSync('logs') || [];
    logs.unshift(Date.now());
    wx.setStorageSync('logs', logs);
    // 登录
    wx.login({
      success: res => {
        console.log(res.code);
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    });
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
wx.getStorageSync('logs') 
INFO [taroize] parsePage - 解析CallExpression 
logs.unshift(Date.now()) 
INFO [taroize] parsePage - 解析CallExpression 
Date.now() 
INFO [taroize] parsePage - 解析CallExpression 
wx.setStorageSync('logs', logs) 
INFO [taroize] parsePage - 解析CallExpression 
wx.login({
  success: res => {
    console.log(res.code);
    // 发送 res.code 到后台换取 openId, sessionKey, unionId
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
console.log(res.code) 
INFO [taroize] parseScript - 解析Identifier 
App 
INFO [taroize] parseScript - 解析Identifier 
globalData 
INFO [taroize] parseScript - 解析Identifier 
onLaunch 
INFO [taroize] parseScript - 解析BlockStatement 
{
  // 展示本地存储能力
  const logs = Taro.getStorageSync('logs') || [];
  logs.unshift(Date.now());
  Taro.setStorageSync('logs', logs);
  // 登录
  Taro.login({
    success: res => {
      console.log(res.code);
      // 发送 res.code 到后台换取 openId, sessionKey, unionId
    }
  });
} 
INFO [taroize] parseScript - 解析Identifier 
logs 
INFO [taroize] parseScript - 解析CallExpression 
Taro.getStorageSync('logs') 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
getStorageSync 
INFO [taroize] parseScript - 解析CallExpression 
logs.unshift(Date.now()) 
INFO [taroize] parseScript - 解析Identifier 
logs 
INFO [taroize] parseScript - 解析Identifier 
unshift 
INFO [taroize] parseScript - 解析CallExpression 
Date.now() 
INFO [taroize] parseScript - 解析Identifier 
Date 
INFO [taroize] parseScript - 解析Identifier 
now 
INFO [taroize] parseScript - 解析CallExpression 
Taro.setStorageSync('logs', logs) 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
setStorageSync 
INFO [taroize] parseScript - 解析Identifier 
logs 
INFO [taroize] parseScript - 解析CallExpression 
Taro.login({
  success: res => {
    console.log(res.code);
    // 发送 res.code 到后台换取 openId, sessionKey, unionId
  }
}) 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
login 
INFO [taroize] parseScript - 解析Identifier 
success 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析BlockStatement 
{
  console.log(res.code);
  // 发送 res.code 到后台换取 openId, sessionKey, unionId
} 
INFO [taroize] parseScript - 解析CallExpression 
console.log(res.code) 
INFO [taroize] parseScript - 解析Identifier 
console 
INFO [taroize] parseScript - 解析Identifier 
log 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
code 
INFO [taro-transformer-wx] parseCode - 入参 
code: export const formatTime = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join('/') +
        ' ' +
        [hour, minute, second].map(formatNumber).join(':'));
};
const formatNumber = (n) => {
    const s = n.toString();
    return s[1] ? s : '0' + s;
};
 
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js","outputFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/src/app.js","importStylePath":null,"imports":[]} 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import { Block } from "@tarojs/components"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js 
value: @tarojs/components 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import React from "react"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js 
value: react 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import Taro from "@tarojs/taro"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js 
value: @tarojs/taro 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/app.js 
value: @tarojs/with-weapp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
App({
  globalData: {},
  onLaunch() {
    // 展示本地存储能力
    const logs = Taro.getStorageSync('logs') || [];
    logs.unshift(Date.now());
    Taro.setStorageSync('logs', logs);
    // 登录
    Taro.login({
      success: res => {
        console.log(res.code);
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    });
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.setOptionsToCache({
  globalData: {},
  onLaunch() {
    // 展示本地存储能力
    const logs = Taro.getStorageSync('logs') || [];
    logs.unshift(Date.now());
    Taro.setStorageSync('logs', logs);
    // 登录
    Taro.login({
      success: res => {
        console.log(res.code);
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    });
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.setOptionsToCache 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getStorageSync('logs') 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getStorageSync 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
logs.unshift(Date.now()) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
logs.unshift 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Date.now() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Date.now 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.setStorageSync('logs', logs) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.setStorageSync 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.login({
  success: res => {
    console.log(res.code);
    // 发送 res.code 到后台换取 openId, sessionKey, unionId
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.login 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
console.log(res.code) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
console.log 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.code 
INFO [taro-cli-convertor] parseAst - 解析ClassDeclaration 
@withWeapp(cacheOptions.getOptionsFromCache(), true)
class App extends React.Component {
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props.children 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
React.Component 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache(), true) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.getOptionsFromCache 
INFO [taro-cli-convertor] parseAst - 解析ExportDefaultDeclaration 
export default App; 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/components" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"react" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/taro" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'logs' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'logs' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
cacheOptions 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
default: withWeapp 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.setOptionsToCache({
  globalData: {},
  onLaunch() {
    // 展示本地存储能力
    const logs = Taro.getStorageSync('logs') || [];
    logs.unshift(Date.now());
    Taro.setStorageSync('logs', logs);
    // 登录
    Taro.login({
      success: res => {
        console.log(res.code);
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    });
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
globalData: {} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getStorageSync('logs') 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
logs.unshift(Date.now()) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Date.now() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.setStorageSync('logs', logs) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.login({
  success: res => {
    console.log(res.code);
    // 发送 res.code 到后台换取 openId, sessionKey, unionId
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
success: res => {
  console.log(res.code);
  // 发送 res.code 到后台换取 openId, sessionKey, unionId
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
console.log(res.code) 
INFO [taro-cli-convertor] convertToOptional - 解析ClassBody 
{
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache(), true) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  cacheOptions
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  default: withWeapp
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
// 展示本地存储能力
const logs = Taro.getStorageSync('logs') || []; 
INFO [taro-cli-convertor] traversePages - 开始转换页面 
pages/index/index 
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js","outputFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/src/pages/index/index.js","importStylePath":null,"depComponents":{},"imports":[],"pluginComponents":{}} 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import { Block, NavigationBar, ScrollView, View, Button, Image, Text, Input } from "@tarojs/components"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js 
value: @tarojs/components 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import React from "react"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js 
value: react 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import Taro from "@tarojs/taro"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js 
value: @tarojs/taro 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js 
value: @tarojs/with-weapp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getApp() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getApp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Component({
  data: {
    motto: 'Hello World1',
    userInfo: {
      avatarUrl: defaultAvatarUrl,
      nickName: ''
    },
    hasUserInfo: false,
    canIUseGetUserProfile: Taro.canIUse('getUserProfile'),
    canIUseNicknameComp: Taro.canIUse('input.type.nickname')
  },
  methods: {
    // 事件处理函数
    bindViewTap() {
      Taro.navigateTo({
        url: '../logs/logs'
      });
    },
    onChooseAvatar(e) {
      const {
        avatarUrl
      } = e.detail;
      const {
        nickName
      } = this.data.userInfo;
      this.setData({
        "userInfo.avatarUrl": avatarUrl,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    onInputChange(e) {
      const nickName = e.detail.value;
      const {
        avatarUrl
      } = this.data.userInfo;
      this.setData({
        "userInfo.nickName": nickName,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    getUserProfile() {
      // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
      Taro.getUserProfile({
        desc: '展示用户信息',
        // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
        success: res => {
          console.log(res);
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          });
        }
      });
    }
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.setOptionsToCache({
  data: {
    motto: 'Hello World1',
    userInfo: {
      avatarUrl: defaultAvatarUrl,
      nickName: ''
    },
    hasUserInfo: false,
    canIUseGetUserProfile: Taro.canIUse('getUserProfile'),
    canIUseNicknameComp: Taro.canIUse('input.type.nickname')
  },
  methods: {
    // 事件处理函数
    bindViewTap() {
      Taro.navigateTo({
        url: '../logs/logs'
      });
    },
    onChooseAvatar(e) {
      const {
        avatarUrl
      } = e.detail;
      const {
        nickName
      } = this.data.userInfo;
      this.setData({
        "userInfo.avatarUrl": avatarUrl,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    onInputChange(e) {
      const nickName = e.detail.value;
      const {
        avatarUrl
      } = this.data.userInfo;
      this.setData({
        "userInfo.nickName": nickName,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    getUserProfile() {
      // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
      Taro.getUserProfile({
        desc: '展示用户信息',
        // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
        success: res => {
          console.log(res);
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          });
        }
      });
    }
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.setOptionsToCache 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.canIUse('getUserProfile') 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.canIUse 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.canIUse('input.type.nickname') 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.canIUse 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.navigateTo({
  url: '../logs/logs'
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.navigateTo 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
e.detail 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data.userInfo 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.setData({
  "userInfo.avatarUrl": avatarUrl,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.setData 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
e.detail.value 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
e.detail 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data.userInfo 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.setData({
  "userInfo.nickName": nickName,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.setData 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getUserProfile({
  desc: '展示用户信息',
  // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
  success: res => {
    console.log(res);
    this.setData({
      userInfo: res.userInfo,
      hasUserInfo: true
    });
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getUserProfile 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
console.log(res) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
console.log 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.setData({
  userInfo: res.userInfo,
  hasUserInfo: true
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.setData 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.userInfo 
INFO [taro-cli-convertor] parseAst - 解析ClassDeclaration 
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
        textAlign: "center",
        color: "#b9b9b9"
      }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
      textAlign: "center",
      color: "#b9b9b9"
    }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
    textAlign: "center",
    color: "#b9b9b9"
  }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.onChooseAvatar 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Image className="avatar" src={userInfo.avatarUrl}></Image> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
userInfo.avatarUrl 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Text className="nickname-label">昵称</Text> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.onInputChange 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Button onClick={this.getUserProfile}>获取头像昵称</Button> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.getUserProfile 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View>请使用2.10.4及以上版本基础库</View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.bindViewTap 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
userInfo.avatarUrl 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Text className="userinfo-nickname">{userInfo.nickName}</Text> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
userInfo.nickName 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View style={{
  textAlign: "center",
  color: "#b9b9b9"
}}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="usermotto"><Text className="user-motto">{motto}</Text></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Text className="user-motto">{motto}</Text> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
React.Component 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.getOptionsFromCache 
INFO [taro-cli-convertor] parseAst - 解析ExportDefaultDeclaration 
export default _C; 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/components" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"react" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/taro" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'Hello World1' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'getUserProfile' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'input.type.nickname' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'../logs/logs' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"userInfo.avatarUrl" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"userInfo.nickName" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'展示用户信息' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"Weixin" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"black" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"#FFF" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"scrollarea" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"list" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"container" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"userinfo" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"avatar-wrapper" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"chooseAvatar" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"avatar" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"nickname-wrapper" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"nickname-label" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"nickname" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"nickname-input" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"userinfo-avatar" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"cover" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"userinfo-nickname" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"center" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"#b9b9b9" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"circular" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"1rem" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"\u52A0\u8F7D\u4E2D..." 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"left-icon" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"wr" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"search" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"1rem" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"#bbb" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"usermotto" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"user-motto" 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
cacheOptions 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
default: withWeapp 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getApp() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.setOptionsToCache({
  data: {
    motto: 'Hello World1',
    userInfo: {
      avatarUrl: defaultAvatarUrl,
      nickName: ''
    },
    hasUserInfo: false,
    canIUseGetUserProfile: Taro.canIUse('getUserProfile'),
    canIUseNicknameComp: Taro.canIUse('input.type.nickname')
  },
  methods: {
    // 事件处理函数
    bindViewTap() {
      Taro.navigateTo({
        url: '../logs/logs'
      });
    },
    onChooseAvatar(e) {
      const {
        avatarUrl
      } = e.detail;
      const {
        nickName
      } = this.data.userInfo;
      this.setData({
        "userInfo.avatarUrl": avatarUrl,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    onInputChange(e) {
      const nickName = e.detail.value;
      const {
        avatarUrl
      } = this.data.userInfo;
      this.setData({
        "userInfo.nickName": nickName,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    getUserProfile() {
      // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
      Taro.getUserProfile({
        desc: '展示用户信息',
        // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
        success: res => {
          console.log(res);
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          });
        }
      });
    }
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
data: {
  motto: 'Hello World1',
  userInfo: {
    avatarUrl: defaultAvatarUrl,
    nickName: ''
  },
  hasUserInfo: false,
  canIUseGetUserProfile: Taro.canIUse('getUserProfile'),
  canIUseNicknameComp: Taro.canIUse('input.type.nickname')
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
motto: 'Hello World1' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
userInfo: {
  avatarUrl: defaultAvatarUrl,
  nickName: ''
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
avatarUrl: defaultAvatarUrl 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
nickName: '' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
hasUserInfo: false 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
canIUseGetUserProfile: Taro.canIUse('getUserProfile') 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.canIUse('getUserProfile') 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
canIUseNicknameComp: Taro.canIUse('input.type.nickname') 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.canIUse('input.type.nickname') 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
methods: {
  // 事件处理函数
  bindViewTap() {
    Taro.navigateTo({
      url: '../logs/logs'
    });
  },
  onChooseAvatar(e) {
    const {
      avatarUrl
    } = e.detail;
    const {
      nickName
    } = this.data.userInfo;
    this.setData({
      "userInfo.avatarUrl": avatarUrl,
      hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
    });
  },
  onInputChange(e) {
    const nickName = e.detail.value;
    const {
      avatarUrl
    } = this.data.userInfo;
    this.setData({
      "userInfo.nickName": nickName,
      hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
    });
  },
  getUserProfile() {
    // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
    Taro.getUserProfile({
      desc: '展示用户信息',
      // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
      success: res => {
        console.log(res);
        this.setData({
          userInfo: res.userInfo,
          hasUserInfo: true
        });
      }
    });
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.navigateTo({
  url: '../logs/logs'
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
url: '../logs/logs' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
avatarUrl 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
nickName 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.setData({
  "userInfo.avatarUrl": avatarUrl,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
"userInfo.avatarUrl": avatarUrl 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
avatarUrl 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.setData({
  "userInfo.nickName": nickName,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
"userInfo.nickName": nickName 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getUserProfile({
  desc: '展示用户信息',
  // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
  success: res => {
    console.log(res);
    this.setData({
      userInfo: res.userInfo,
      hasUserInfo: true
    });
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
desc: '展示用户信息' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
// 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
success: res => {
  console.log(res);
  this.setData({
    userInfo: res.userInfo,
    hasUserInfo: true
  });
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
console.log(res) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.setData({
  userInfo: res.userInfo,
  hasUserInfo: true
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
userInfo: res.userInfo 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
hasUserInfo: true 
INFO [taro-cli-convertor] convertToOptional - 解析ClassBody 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      canIUseNicknameComp,
      hasUserInfo,
      userInfo,
      canIUseGetUserProfile,
      motto
    } = this.data;
    return <Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
            textAlign: "center",
            color: "#b9b9b9"
          }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
canIUseNicknameComp 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
hasUserInfo 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
userInfo 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
canIUseGetUserProfile 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
motto 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
textAlign: "center" 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
color: "#b9b9b9" 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  cacheOptions
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  default: withWeapp
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
// index.ts
// 获取应用实例
const app = Taro.getApp(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const defaultAvatarUrl = 'https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0'; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  avatarUrl
} = e.detail; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  nickName
} = this.data.userInfo; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const nickName = e.detail.value; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  avatarUrl
} = this.data.userInfo; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  canIUseNicknameComp,
  hasUserInfo,
  userInfo,
  canIUseGetUserProfile,
  motto
} = this.data; 
INFO [taro-cli-convertor] traverseComponents - 开始转换组件 
/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar 
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar.js","outputFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/src/components/navigation-bar/navigation-bar.js","importStylePath":null,"depComponents":{},"imports":[],"pluginComponents":{}} 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import { Block, View, Slot, Text } from "@tarojs/components"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar.js 
value: @tarojs/components 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import React from "react"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar.js 
value: react 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import Taro from "@tarojs/taro"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar.js 
value: @tarojs/taro 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar.js 
value: @tarojs/with-weapp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Component({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    }
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = Taro.getMenuButtonBoundingClientRect();
      Taro.getSystemInfo({
        success: res => {
          const isAndroid = res.platform === 'android';
          const isDevtools = res.platform === 'devtools';
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left}px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          });
        }
      });
    }
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show) {
      const animated = this.data.animated;
      let displayStyle = '';
      if (animated) {
        displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`;
      }
      this.setData({
        displayStyle
      });
    },
    back() {
      const data = this.data;
      if (data.delta) {
        Taro.navigateBack({
          delta: data.delta
        });
      }
      this.triggerEvent('back', {
        delta: data.delta
      }, {});
    }
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.setOptionsToCache({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    }
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = Taro.getMenuButtonBoundingClientRect();
      Taro.getSystemInfo({
        success: res => {
          const isAndroid = res.platform === 'android';
          const isDevtools = res.platform === 'devtools';
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left}px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          });
        }
      });
    }
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show) {
      const animated = this.data.animated;
      let displayStyle = '';
      if (animated) {
        displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`;
      }
      this.setData({
        displayStyle
      });
    },
    back() {
      const data = this.data;
      if (data.delta) {
        Taro.navigateBack({
          delta: data.delta
        });
      }
      this.triggerEvent('back', {
        delta: data.delta
      }, {});
    }
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.setOptionsToCache 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getMenuButtonBoundingClientRect() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getMenuButtonBoundingClientRect 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getSystemInfo({
  success: res => {
    const isAndroid = res.platform === 'android';
    const isDevtools = res.platform === 'devtools';
    this.setData({
      ios: !isAndroid,
      innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
      leftWidth: `width: ${res.windowWidth - rect.left}px`,
      safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
    });
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getSystemInfo 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.platform 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.platform 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.setData({
  ios: !isAndroid,
  innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
  leftWidth: `width: ${res.windowWidth - rect.left}px`,
  safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.setData 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.windowWidth 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
rect.left 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.windowWidth 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
rect.left 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.safeArea.top 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.safeArea 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.safeArea.top 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
res.safeArea 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data.animated 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析AssignmentExpression 
displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;` 
INFO [taro-cli-convertor] parseAst - 解析AssignmentExpression 
displayStyle = `display: ${show ? '' : 'none'}` 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.setData({
  displayStyle
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.setData 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
data.delta 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.navigateBack({
  delta: data.delta
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.navigateBack 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
data.delta 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.triggerEvent('back', {
  delta: data.delta
}, {}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.triggerEvent 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
data.delta 
INFO [taro-cli-convertor] parseAst - 解析ClassDeclaration 
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
          /*  返回首页  */
        }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
      /*  标题  */
    }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
      /*  右侧留空  */
    }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
        /*  返回首页  */
      }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
    /*  标题  */
  }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
    /*  右侧留空  */
  }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
      /*  返回首页  */
    }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
    /*  返回首页  */
  }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.back 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.home 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block>{this.props.renderLeft}</Block> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props.renderLeft 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><Text>{title}</Text></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Text>{title}</Text> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block>{this.props.renderCenter}</Block> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props.renderCenter 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="weui-navigation-bar__right">{this.props.renderRight}</View> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props.renderRight 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
React.Component 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.getOptionsFromCache 
INFO [taro-cli-convertor] parseAst - 解析ExportDefaultDeclaration 
export default _C; 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/components" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"react" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/taro" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'_showChange' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'android' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'devtools' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'1' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'0' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'none' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'back' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__inner " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'ios' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'android' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"color: " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"; background: " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"; " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"; " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"; " 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
";" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__left" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
";" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__btn_goback_wrapper" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-active" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"100" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"button" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"\u8FD4\u56DE" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__btn_home_wrapper" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-active" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"button" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"\u9996\u9875" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__center" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__loading" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"alert" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-loading" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"img" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"\u52A0\u8F7D\u4E2D" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"weui-navigation-bar__right" 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
cacheOptions 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
default: withWeapp 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.setOptionsToCache({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    }
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = Taro.getMenuButtonBoundingClientRect();
      Taro.getSystemInfo({
        success: res => {
          const isAndroid = res.platform === 'android';
          const isDevtools = res.platform === 'devtools';
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left}px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          });
        }
      });
    }
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show) {
      const animated = this.data.animated;
      let displayStyle = '';
      if (animated) {
        displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`;
      }
      this.setData({
        displayStyle
      });
    },
    back() {
      const data = this.data;
      if (data.delta) {
        Taro.navigateBack({
          delta: data.delta
        });
      }
      this.triggerEvent('back', {
        delta: data.delta
      }, {});
    }
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
options: {
  multipleSlots: true // 在组件定义时的选项中启用多slot支持
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
multipleSlots: true // 在组件定义时的选项中启用多slot支持 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
/**
 * 组件的属性列表
 */
properties: {
  extClass: {
    type: String,
    value: ''
  },
  title: {
    type: String,
    value: ''
  },
  background: {
    type: String,
    value: ''
  },
  color: {
    type: String,
    value: ''
  },
  back: {
    type: Boolean,
    value: true
  },
  loading: {
    type: Boolean,
    value: false
  },
  homeButton: {
    type: Boolean,
    value: false
  },
  animated: {
    // 显示隐藏的时候opacity动画效果
    type: Boolean,
    value: true
  },
  show: {
    // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
    type: Boolean,
    value: true,
    observer: '_showChange'
  },
  // back为true的时候，返回的页面深度
  delta: {
    type: Number,
    value: 1
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
extClass: {
  type: String,
  value: ''
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: String 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: '' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
title: {
  type: String,
  value: ''
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: String 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: '' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
background: {
  type: String,
  value: ''
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: String 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: '' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
color: {
  type: String,
  value: ''
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: String 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: '' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
back: {
  type: Boolean,
  value: true
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: Boolean 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: true 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
loading: {
  type: Boolean,
  value: false
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: Boolean 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: false 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
homeButton: {
  type: Boolean,
  value: false
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: Boolean 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: false 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
animated: {
  // 显示隐藏的时候opacity动画效果
  type: Boolean,
  value: true
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
// 显示隐藏的时候opacity动画效果
type: Boolean 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: true 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
show: {
  // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
  type: Boolean,
  value: true,
  observer: '_showChange'
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
// 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
type: Boolean 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: true 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
observer: '_showChange' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
// back为true的时候，返回的页面深度
delta: {
  type: Number,
  value: 1
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
type: Number 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
value: 1 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
/**
 * 组件的初始数据
 */
data: {
  displayStyle: ''
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
displayStyle: '' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
lifetimes: {
  attached() {
    const rect = Taro.getMenuButtonBoundingClientRect();
    Taro.getSystemInfo({
      success: res => {
        const isAndroid = res.platform === 'android';
        const isDevtools = res.platform === 'devtools';
        this.setData({
          ios: !isAndroid,
          innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
          leftWidth: `width: ${res.windowWidth - rect.left}px`,
          safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
        });
      }
    });
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getMenuButtonBoundingClientRect() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getSystemInfo({
  success: res => {
    const isAndroid = res.platform === 'android';
    const isDevtools = res.platform === 'devtools';
    this.setData({
      ios: !isAndroid,
      innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
      leftWidth: `width: ${res.windowWidth - rect.left}px`,
      safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
    });
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
success: res => {
  const isAndroid = res.platform === 'android';
  const isDevtools = res.platform === 'devtools';
  this.setData({
    ios: !isAndroid,
    innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
    leftWidth: `width: ${res.windowWidth - rect.left}px`,
    safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
  });
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.setData({
  ios: !isAndroid,
  innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
  leftWidth: `width: ${res.windowWidth - rect.left}px`,
  safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
ios: !isAndroid 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px` 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
leftWidth: `width: ${res.windowWidth - rect.left}px` 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : `` 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
/**
 * 组件的方法列表
 */
methods: {
  _showChange(show) {
    const animated = this.data.animated;
    let displayStyle = '';
    if (animated) {
      displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
    } else {
      displayStyle = `display: ${show ? '' : 'none'}`;
    }
    this.setData({
      displayStyle
    });
  },
  back() {
    const data = this.data;
    if (data.delta) {
      Taro.navigateBack({
        delta: data.delta
      });
    }
    this.triggerEvent('back', {
      delta: data.delta
    }, {});
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.setData({
  displayStyle
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
displayStyle 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.navigateBack({
  delta: data.delta
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
delta: data.delta 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.triggerEvent('back', {
  delta: data.delta
}, {}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
delta: data.delta 
INFO [taro-cli-convertor] convertToOptional - 解析ClassBody 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      extClass,
      ios,
      color,
      background,
      displayStyle,
      innerPaddingRight,
      safeAreaTop,
      leftWidth,
      back,
      homeButton,
      loading,
      title
    } = this.data;
    return <View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
              /*  返回首页  */
            }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block>{this.props.renderLeft}</Block>}</View>{
          /*  标题  */
        }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block>{this.props.renderCenter}</Block>}</View>{
          /*  右侧留空  */
        }<View className="weui-navigation-bar__right">{this.props.renderRight}</View></View></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
extClass 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
ios 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
color 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
background 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
displayStyle 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
innerPaddingRight 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
safeAreaTop 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
leftWidth 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
back 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
homeButton 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
loading 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
title 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  cacheOptions
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  default: withWeapp
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const rect = Taro.getMenuButtonBoundingClientRect(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const isAndroid = res.platform === 'android'; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const isDevtools = res.platform === 'devtools'; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const animated = this.data.animated; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
let displayStyle = ''; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const data = this.data; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  extClass,
  ios,
  color,
  background,
  displayStyle,
  innerPaddingRight,
  safeAreaTop,
  leftWidth,
  back,
  homeButton,
  loading,
  title
} = this.data; 
INFO [taro-cli-convertor] traversePages - 开始转换页面 
pages/logs/logs 
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js","outputFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/src/pages/logs/logs.js","importStylePath":null,"depComponents":{},"imports":[],"pluginComponents":{}} 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import { Block, NavigationBar, ScrollView, View } from "@tarojs/components"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
value: @tarojs/components 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import React from "react"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
value: react 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import Taro from "@tarojs/taro"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
value: @tarojs/taro 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
value: @tarojs/with-weapp 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
// logs.ts
// const util = require('../../utils/util.js')
import { formatTime } from '../../utils/util'; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
value: ../../utils/util 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Component({
  data: {
    logs: []
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (Taro.getStorageSync('logs') || []).map(log => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          };
        })
      });
    }
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.setOptionsToCache({
  data: {
    logs: []
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (Taro.getStorageSync('logs') || []).map(log => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          };
        })
      });
    }
  }
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.setOptionsToCache 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
this.setData({
  logs: (Taro.getStorageSync('logs') || []).map(log => {
    return {
      date: formatTime(new Date(log)),
      timeStamp: log
    };
  })
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.setData 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
(Taro.getStorageSync('logs') || []).map(log => {
  return {
    date: formatTime(new Date(log)),
    timeStamp: log
  };
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
(Taro.getStorageSync('logs') || []).map 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getStorageSync('logs') 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getStorageSync 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
formatTime(new Date(log)) 
INFO [taro-cli-convertor] parseAst - 解析ClassDeclaration 
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs.map((log, index) => {
      return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
    })}</ScrollView></Block> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<ScrollView className="scrollarea" scrollY type="list">{logs.map((log, index) => {
    return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
  })}</ScrollView> 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
logs.map((log, index) => {
  return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
logs.map 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
log.timeStamp 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View className="log-item">{index + 1 + ". " + log.date}</View> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
log.date 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
React.Component 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.getOptionsFromCache 
INFO [taro-cli-convertor] parseAst - 解析ExportDefaultDeclaration 
export default _C; 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/components" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"react" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/taro" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"../../utils/util.js" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'logs' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"black" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"#FFF" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"scrollarea" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"list" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"log-item" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
". " 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
cacheOptions 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
default: withWeapp 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.setOptionsToCache({
  data: {
    logs: []
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (Taro.getStorageSync('logs') || []).map(log => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          };
        })
      });
    }
  }
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
data: {
  logs: []
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
logs: [] 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
lifetimes: {
  attached() {
    this.setData({
      logs: (Taro.getStorageSync('logs') || []).map(log => {
        return {
          date: formatTime(new Date(log)),
          timeStamp: log
        };
      })
    });
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
this.setData({
  logs: (Taro.getStorageSync('logs') || []).map(log => {
    return {
      date: formatTime(new Date(log)),
      timeStamp: log
    };
  })
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
logs: (Taro.getStorageSync('logs') || []).map(log => {
  return {
    date: formatTime(new Date(log)),
    timeStamp: log
  };
}) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
(Taro.getStorageSync('logs') || []).map(log => {
  return {
    date: formatTime(new Date(log)),
    timeStamp: log
  };
}) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getStorageSync('logs') 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
date: formatTime(new Date(log)) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
formatTime(new Date(log)) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
timeStamp: log 
INFO [taro-cli-convertor] convertToOptional - 解析ClassBody 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs?.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs?.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs?.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      logs
    } = this.data;
    return <Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list">{logs?.map((log, index) => {
          return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
        })}</ScrollView></Block>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
logs 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  cacheOptions
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  default: withWeapp
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  logs
} = this.data; 
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/utils/util.js","outputFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/src/utils/util.js","imports":[]} 
INFO [taro-cli-convertor] parseAst - 解析ExportNamedDeclaration 
export const formatTime = date => {
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hour = date.getHours();
  const minute = date.getMinutes();
  const second = date.getSeconds();
  return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':');
}; 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
date.getFullYear() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
date.getFullYear 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
date.getMonth() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
date.getMonth 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
date.getDate() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
date.getDate 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
date.getHours() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
date.getHours 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
date.getMinutes() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
date.getMinutes 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
date.getSeconds() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
date.getSeconds 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
[year, month, day].map(formatNumber).join('/') 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
[year, month, day].map(formatNumber).join 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
[year, month, day].map(formatNumber) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
[year, month, day].map 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
[hour, minute, second].map(formatNumber).join(':') 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
[hour, minute, second].map(formatNumber).join 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
[hour, minute, second].map(formatNumber) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
[hour, minute, second].map 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
n.toString() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
n.toString 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
s[1] 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'/' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
' ' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
':' 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'0' 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
date.getFullYear() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
date.getMonth() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
date.getDate() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
date.getHours() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
date.getMinutes() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
date.getSeconds() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
[year, month, day].map(formatNumber).join('/') 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
[year, month, day].map(formatNumber) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
[hour, minute, second].map(formatNumber).join(':') 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
[hour, minute, second].map(formatNumber) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
n.toString() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const formatTime = date => {
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hour = date.getHours();
  const minute = date.getMinutes();
  const second = date.getSeconds();
  return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':');
}; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const year = date.getFullYear(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const month = date.getMonth() + 1; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const day = date.getDate(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const hour = date.getHours(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const minute = date.getMinutes(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const second = date.getSeconds(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const formatNumber = n => {
  const s = n.toString();
  return s[1] ? s : '0' + s;
}; 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const s = n.toString(); 
INFO [taro-cli-convertor] traverseComponents - 开始转换组件 
/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar 
INFO [taroize] parse - 入参 
option: {"json":"{}","script":"// logs.ts\n// const util = require('../../utils/util.js')\nimport { formatTime } from '../../utils/util';\nComponent({\n    data: {\n        logs: [],\n    },\n    lifetimes: {\n        attached() {\n            this.setData({\n                logs: (wx.getStorageSync('logs') || []).map((log) => {\n                    return {\n                        date: formatTime(new Date(log)),\n                        timeStamp: log\n                    };\n                }),\n            });\n        }\n    },\n});\n","scriptPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js","wxml":"<!--logs.wxml-->\n<navigation-bar title=\"查看启动日志\" back=\"{{true}}\" color=\"black\" background=\"#FFF\"></navigation-bar>\n<scroll-view class=\"scrollarea\" scroll-y type=\"list\">\n  <block wx:for=\"{{logs}}\" wx:key=\"timeStamp\" wx:for-item=\"log\">\n    <view class=\"log-item\">{{index + 1}}. {{log.date}}</view>\n  </block>\n</scroll-view>\n","path":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs","rootPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram","pluginInfo":{"pluginRoot":"","pluginName":"","pages":{},"pagesMap":{},"publicComponents":{},"entryFilePath":""},"logFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/.convert/convert.log","templatePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.wxml","framework":"React"} 
INFO [taroize] parseWXML - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs 
parseImport: undefined 
INFO [taroize] parseNode - 入参 
tagName: undefined 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"title","value":"查看启动日志"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"back","value":"{{true}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"color","value":"black"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"background","value":"#FFF"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"scrollarea"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"scroll-y","value":null} 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"type","value":"list"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: scroll-view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:for","value":"{{logs}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:key","value":"timeStamp"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:for-item","value":"log"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"log-item"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] createPreWxmlVistor - 入参 
templates: [object Map] 
INFO [taroize] templateBfs - 进入函数 
INFO [taroize] createWxmlVistor - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><Block wx:for={logs} wx:key="timeStamp" wx:for-item="log"><View className="log-item">{index + 1 + ". " + log.date}</View></Block></ScrollView></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
back={true} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="black" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
background="#FFF" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
background 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="scrollarea" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="list" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:for={logs} 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<NavigationBar title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" back={true} color="black" background="#FFF"></NavigationBar> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
back={true} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="black" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
background="#FFF" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
background 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
title="\u67E5\u770B\u542F\u52A8\u65E5\u5FD7" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
back={true} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="black" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
background="#FFF" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
background 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<ScrollView className="scrollarea" scrollY type="list"><Block>{logs.map((log, index) => {
      return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
    })}</Block></ScrollView> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="scrollarea" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="list" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="scrollarea" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="list" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block>{logs.map((log, index) => {
    return <Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block>;
  })}</Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析Identifier 
logs 
INFO [taroize] createWxmlVistor - 解析Identifier 
map 
INFO [taroize] createWxmlVistor - 解析Identifier 
log 
INFO [taroize] createWxmlVistor - 解析Identifier 
index 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析Identifier 
log 
INFO [taroize] createWxmlVistor - 解析Identifier 
timeStamp 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="log-item">{index + 1 + ". " + log.date}</View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
index 
INFO [taroize] createWxmlVistor - 解析Identifier 
log 
INFO [taroize] createWxmlVistor - 解析Identifier 
date 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析Identifier 
logs 
INFO [taroize] createWxmlVistor - 解析Identifier 
map 
INFO [taroize] createWxmlVistor - 解析Identifier 
log 
INFO [taroize] createWxmlVistor - 解析Identifier 
index 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block key={log.timeStamp}><View className="log-item">{index + 1 + ". " + log.date}</View></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
key={log.timeStamp} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
key 
INFO [taroize] createWxmlVistor - 解析Identifier 
log 
INFO [taroize] createWxmlVistor - 解析Identifier 
timeStamp 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="log-item">{index + 1 + ". " + log.date}</View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="log-item" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
index 
INFO [taroize] createWxmlVistor - 解析Identifier 
log 
INFO [taroize] createWxmlVistor - 解析Identifier 
date 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] parseScript - 入参 
scriptPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
INFO [taroize] parseCode - 入参
scriptPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/logs/logs.js 
INFO [taroize] parseScript - 解析Identifier 
formatTime 
INFO [taroize] parseScript - 解析Identifier 
formatTime 
INFO [taroize] parseScript - 解析CallExpression 
Component({
  data: {
    logs: []
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (wx.getStorageSync('logs') || []).map(log => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          };
        })
      });
    }
  }
}) 
INFO [taroize] parsePage - 入参 
pagePath: Component({
  data: {
    logs: []
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (wx.getStorageSync('logs') || []).map(log => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          };
        })
      });
    }
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
this.setData({
  logs: (wx.getStorageSync('logs') || []).map(log => {
    return {
      date: formatTime(new Date(log)),
      timeStamp: log
    };
  })
}) 
INFO [taroize] parsePage - 解析CallExpression 
(wx.getStorageSync('logs') || []).map(log => {
  return {
    date: formatTime(new Date(log)),
    timeStamp: log
  };
}) 
INFO [taroize] parsePage - 解析CallExpression 
wx.getStorageSync('logs') 
INFO [taroize] parsePage - 解析CallExpression 
formatTime(new Date(log)) 
INFO [taroize] parseScript - 解析Identifier 
Component 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
logs 
INFO [taroize] parseScript - 解析Identifier 
lifetimes 
INFO [taroize] parseScript - 解析Identifier 
attached 
INFO [taroize] parseScript - 解析BlockStatement 
{
  this.setData({
    logs: (Taro.getStorageSync('logs') || []).map(log => {
      return {
        date: formatTime(new Date(log)),
        timeStamp: log
      };
    })
  });
} 
INFO [taroize] parseScript - 解析CallExpression 
this.setData({
  logs: (Taro.getStorageSync('logs') || []).map(log => {
    return {
      date: formatTime(new Date(log)),
      timeStamp: log
    };
  })
}) 
INFO [taroize] parseScript - 解析Identifier 
setData 
INFO [taroize] parseScript - 解析Identifier 
logs 
INFO [taroize] parseScript - 解析CallExpression 
(Taro.getStorageSync('logs') || []).map(log => {
  return {
    date: formatTime(new Date(log)),
    timeStamp: log
  };
}) 
INFO [taroize] parseScript - 解析CallExpression 
Taro.getStorageSync('logs') 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
getStorageSync 
INFO [taroize] parseScript - 解析Identifier 
map 
INFO [taroize] parseScript - 解析Identifier 
log 
INFO [taroize] parseScript - 解析BlockStatement 
{
  return {
    date: formatTime(new Date(log)),
    timeStamp: log
  };
} 
INFO [taroize] parseScript - 解析Identifier 
date 
INFO [taroize] parseScript - 解析CallExpression 
formatTime(new Date(log)) 
INFO [taroize] parseScript - 解析Identifier 
formatTime 
INFO [taroize] parseScript - 解析Identifier 
Date 
INFO [taroize] parseScript - 解析Identifier 
log 
INFO [taroize] parseScript - 解析Identifier 
timeStamp 
INFO [taroize] parseScript - 解析Identifier 
log 
INFO [taroize] parse - 入参 
option: {"json":"{}","script":"\"use strict\";\n// index.ts\n// 获取应用实例\nconst app = getApp();\nconst defaultAvatarUrl = 'https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0';\nComponent({\n    data: {\n        motto: 'Hello World1',\n        userInfo: {\n            avatarUrl: defaultAvatarUrl,\n            nickName: '',\n        },\n        hasUserInfo: false,\n        canIUseGetUserProfile: wx.canIUse('getUserProfile'),\n        canIUseNicknameComp: wx.canIUse('input.type.nickname'),\n    },\n    methods: {\n        // 事件处理函数\n        bindViewTap() {\n            wx.navigateTo({\n                url: '../logs/logs',\n            });\n        },\n        onChooseAvatar(e) {\n            const { avatarUrl } = e.detail;\n            const { nickName } = this.data.userInfo;\n            this.setData({\n                \"userInfo.avatarUrl\": avatarUrl,\n                hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl,\n            });\n        },\n        onInputChange(e) {\n            const nickName = e.detail.value;\n            const { avatarUrl } = this.data.userInfo;\n            this.setData({\n                \"userInfo.nickName\": nickName,\n                hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl,\n            });\n        },\n        getUserProfile() {\n            // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗\n            wx.getUserProfile({\n                desc: '展示用户信息', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写\n                success: (res) => {\n                    console.log(res);\n                    this.setData({\n                        userInfo: res.userInfo,\n                        hasUserInfo: true\n                    });\n                }\n            });\n        },\n    },\n});\n","scriptPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js","wxml":"<!--index.wxml-->\n<navigation-bar title=\"Weixin\" back=\"{{false}}\" color=\"black\" background=\"#FFF\"></navigation-bar>\n<scroll-view class=\"scrollarea\" scroll-y type=\"list\">\n  <view class=\"container\">\n    <view class=\"userinfo\">\n      <block wx:if=\"{{canIUseNicknameComp && !hasUserInfo}}\">\n        <button class=\"avatar-wrapper\" open-type=\"chooseAvatar\" bind:chooseavatar=\"onChooseAvatar\">\n          <image class=\"avatar\" src=\"{{userInfo.avatarUrl}}\"></image>\n        </button>\n        <view class=\"nickname-wrapper\">\n          <text class=\"nickname-label\">昵称</text>\n          <input type=\"nickname\" class=\"nickname-input\" placeholder=\"请输入昵称\" bind:change=\"onInputChange\" />\n        </view>\n      </block>\n      <block wx:elif=\"{{!hasUserInfo}}\">\n        <button wx:if=\"{{canIUseGetUserProfile}}\" bindtap=\"getUserProfile\"> 获取头像昵称 </button>\n        <view wx:else> 请使用2.10.4及以上版本基础库 </view>\n      </block>\n      <block wx:else>\n        <image bindtap=\"bindViewTap\" class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" mode=\"cover\"></image>\n        <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n      </block>\n    </view>\n    <view style=\"text-align: center; color: #b9b9b9\" wx:if=\"{{true}}\">\n        <t-loading theme=\"circular\" size=\"40rpx\" text=\"加载中...\" inherit-color />\n        <t-icon slot=\"left-icon\" prefix=\"wr\" name=\"search\" size=\"40rpx\" color=\"#bbb\" />\n      </view>\n    <view class=\"usermotto\">\n      <text class=\"user-motto\">{{motto}}</text>\n    </view>\n  </view>\n</scroll-view>\n","path":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index","rootPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram","pluginInfo":{"pluginRoot":"","pluginName":"","pages":{},"pagesMap":{},"publicComponents":{},"entryFilePath":""},"logFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/.convert/convert.log","templatePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.wxml","framework":"React"} 
INFO [taroize] parseWXML - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index 
parseImport: undefined 
INFO [taroize] parseNode - 入参 
tagName: undefined 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"title","value":"Weixin"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"back","value":"{{false}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"color","value":"black"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"background","value":"#FFF"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"scrollarea"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"scroll-y","value":null} 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"type","value":"list"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: scroll-view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"container"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"userinfo"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{canIUseNicknameComp && !hasUserInfo}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"avatar-wrapper"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"open-type","value":"chooseAvatar"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"bind:chooseavatar","value":"onChooseAvatar"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: button 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"avatar"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"src","value":"{{userInfo.avatarUrl}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"nickname-wrapper"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"nickname-label"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: text 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"type","value":"nickname"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"nickname-input"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"placeholder","value":"请输入昵称"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"bind:change","value":"onInputChange"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:elif","value":"{{!hasUserInfo}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{canIUseGetUserProfile}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"bindtap","value":"getUserProfile"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: button 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:else","value":null} 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:else","value":null} 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"bindtap","value":"bindViewTap"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"userinfo-avatar"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"src","value":"{{userInfo.avatarUrl}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"mode","value":"cover"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"userinfo-nickname"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: text 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"style","value":"text-align: center; color: #b9b9b9"} 
INFO [taroize] parseStyle - 入参 
key: style 
value: text-align: center; color: #b9b9b9 
INFO [taroize] parseStyleAttrs - 进入函数 
INFO [taroize] convertStyleAttrs - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{true}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"theme","value":"circular"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"size","value":"40rpx"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"text","value":"加载中..."} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"inherit-color","value":null} 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"slot","value":"left-icon"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"prefix","value":"wr"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"name","value":"search"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"size","value":"40rpx"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"color","value":"#bbb"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"usermotto"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"user-motto"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: text 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] createPreWxmlVistor - 入参 
templates: [object Map] 
INFO [taroize] templateBfs - 进入函数 
INFO [taroize] createWxmlVistor - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar><ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo"><Block wx:if={canIUseNicknameComp && !hasUserInfo}><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block><Block wx:elif={!hasUserInfo}><Button wx:if={canIUseGetUserProfile} onClick={this.getUserProfile}>获取头像昵称</Button><View wx:else>请使用2.10.4及以上版本基础库</View></Block><Block wx:else><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block></View><View style={{
        textAlign: "center",
        color: "#b9b9b9"
      }} wx:if={true}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View><View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
title="Weixin" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
back={false} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="black" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
background="#FFF" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
background 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="scrollarea" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="list" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="container" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={canIUseNicknameComp && !hasUserInfo} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={canIUseGetUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={{
  textAlign: "center",
  color: "#b9b9b9"
}} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={true} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={{
  textAlign: "center",
  color: "#b9b9b9"
}} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="usermotto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="user-motto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<NavigationBar title="Weixin" back={false} color="black" background="#FFF"></NavigationBar> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
title="Weixin" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
back={false} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="black" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
background="#FFF" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
background 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
title="Weixin" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
back={false} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="black" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
background="#FFF" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
background 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
NavigationBar 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<ScrollView className="scrollarea" scrollY type="list"><View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
      textAlign: "center",
      color: "#b9b9b9"
    }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View></ScrollView> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="scrollarea" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="list" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="container" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={{
  textAlign: "center",
  color: "#b9b9b9"
}} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="usermotto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="user-motto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="scrollarea" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
scrollY 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="list" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="container"><View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View>{true && <View style={{
    textAlign: "center",
    color: "#b9b9b9"
  }}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View>}<View className="usermotto"><Text className="user-motto">{motto}</Text></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="container" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={{
  textAlign: "center",
  color: "#b9b9b9"
}} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="usermotto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="user-motto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="container" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="userinfo">{canIUseNicknameComp && !hasUserInfo ? <Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> : !hasUserInfo ? <Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> : <Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block>}</View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
canIUseNicknameComp 
INFO [taroize] createWxmlVistor - 解析Identifier 
hasUserInfo 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button><View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Button className="avatar-wrapper" openType="chooseAvatar" onChooseAvatar={this.onChooseAvatar}><Image className="avatar" src={userInfo.avatarUrl}></Image></Button> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
openType="chooseAvatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
openType 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChooseAvatar={this.onChooseAvatar} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析Identifier 
onChooseAvatar 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Image className="avatar" src={userInfo.avatarUrl}></Image> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析Identifier 
userInfo 
INFO [taroize] createWxmlVistor - 解析Identifier 
avatarUrl 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="nickname-wrapper"><Text className="nickname-label">昵称</Text><Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Text className="nickname-label">昵称</Text> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-label" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Input type="nickname" className="nickname-input" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" onChange={this.onInputChange}></Input> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
type="nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
type 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="nickname-input" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
placeholder 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onChange={this.onInputChange} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onChange 
INFO [taroize] createWxmlVistor - 解析Identifier 
onInputChange 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Input 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析Identifier 
hasUserInfo 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block>{canIUseGetUserProfile ? <Button onClick={this.getUserProfile}>获取头像昵称</Button> : <View>请使用2.10.4及以上版本基础库</View>}</Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析Identifier 
canIUseGetUserProfile 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Button onClick={this.getUserProfile}>获取头像昵称</Button> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.getUserProfile} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析Identifier 
getUserProfile 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Button 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View>请使用2.10.4及以上版本基础库</View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image><Text className="userinfo-nickname">{userInfo.nickName}</Text></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Image onClick={this.bindViewTap} className="userinfo-avatar" src={userInfo.avatarUrl} mode="cover"></Image> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.bindViewTap} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析Identifier 
bindViewTap 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-avatar" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
src={userInfo.avatarUrl} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
src 
INFO [taroize] createWxmlVistor - 解析Identifier 
userInfo 
INFO [taroize] createWxmlVistor - 解析Identifier 
avatarUrl 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
mode="cover" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
mode 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Image 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Text className="userinfo-nickname">{userInfo.nickName}</Text> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="userinfo-nickname" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
userInfo 
INFO [taroize] createWxmlVistor - 解析Identifier 
nickName 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View style={{
  textAlign: "center",
  color: "#b9b9b9"
}}><Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading><Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={{
  textAlign: "center",
  color: "#b9b9b9"
}} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={{
  textAlign: "center",
  color: "#b9b9b9"
}} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析Identifier 
textAlign 
INFO [taroize] createWxmlVistor - 解析Identifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Tloading theme="circular" size="1rem" text="\u52A0\u8F7D\u4E2D..." inheritColor></Tloading> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
theme="circular" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
theme 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
text="\u52A0\u8F7D\u4E2D..." 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
inheritColor 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Tloading 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Ticon slot="left-icon" prefix="wr" name="search" size="1rem" color="#bbb"></Ticon> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
slot="left-icon" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
prefix="wr" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
prefix 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="search" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
size="1rem" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
size 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
color="#bbb" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
color 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Ticon 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="usermotto"><Text className="user-motto">{motto}</Text></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="usermotto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="user-motto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="usermotto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Text className="user-motto">{motto}</Text> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="user-motto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="user-motto" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
motto 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ScrollView 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] parseScript - 入参 
scriptPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js 
INFO [taroize] parseCode - 入参
scriptPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/pages/index/index.js 
INFO [taroize] parseScript - 解析Identifier 
app 
INFO [taroize] parseScript - 解析CallExpression 
getApp() 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
getApp 
INFO [taroize] parseScript - 解析Identifier 
defaultAvatarUrl 
INFO [taroize] parseScript - 解析CallExpression 
Component({
  data: {
    motto: 'Hello World1',
    userInfo: {
      avatarUrl: defaultAvatarUrl,
      nickName: ''
    },
    hasUserInfo: false,
    canIUseGetUserProfile: wx.canIUse('getUserProfile'),
    canIUseNicknameComp: wx.canIUse('input.type.nickname')
  },
  methods: {
    // 事件处理函数
    bindViewTap() {
      wx.navigateTo({
        url: '../logs/logs'
      });
    },
    onChooseAvatar(e) {
      const {
        avatarUrl
      } = e.detail;
      const {
        nickName
      } = this.data.userInfo;
      this.setData({
        "userInfo.avatarUrl": avatarUrl,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    onInputChange(e) {
      const nickName = e.detail.value;
      const {
        avatarUrl
      } = this.data.userInfo;
      this.setData({
        "userInfo.nickName": nickName,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    getUserProfile() {
      // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
      wx.getUserProfile({
        desc: '展示用户信息',
        // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
        success: res => {
          console.log(res);
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          });
        }
      });
    }
  }
}) 
INFO [taroize] parsePage - 入参 
pagePath: Component({
  data: {
    motto: 'Hello World1',
    userInfo: {
      avatarUrl: defaultAvatarUrl,
      nickName: ''
    },
    hasUserInfo: false,
    canIUseGetUserProfile: wx.canIUse('getUserProfile'),
    canIUseNicknameComp: wx.canIUse('input.type.nickname')
  },
  methods: {
    // 事件处理函数
    bindViewTap() {
      wx.navigateTo({
        url: '../logs/logs'
      });
    },
    onChooseAvatar(e) {
      const {
        avatarUrl
      } = e.detail;
      const {
        nickName
      } = this.data.userInfo;
      this.setData({
        "userInfo.avatarUrl": avatarUrl,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    onInputChange(e) {
      const nickName = e.detail.value;
      const {
        avatarUrl
      } = this.data.userInfo;
      this.setData({
        "userInfo.nickName": nickName,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
      });
    },
    getUserProfile() {
      // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
      wx.getUserProfile({
        desc: '展示用户信息',
        // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
        success: res => {
          console.log(res);
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          });
        }
      });
    }
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
wx.canIUse('getUserProfile') 
INFO [taroize] parsePage - 解析CallExpression 
wx.canIUse('input.type.nickname') 
INFO [taroize] parsePage - 解析CallExpression 
wx.navigateTo({
  url: '../logs/logs'
}) 
WARN [taroize] replacePluginUrl - 非插件路径 
INFO [taroize] parsePage - 解析CallExpression 
this.setData({
  "userInfo.avatarUrl": avatarUrl,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taroize] parsePage - 解析CallExpression 
this.setData({
  "userInfo.nickName": nickName,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taroize] parsePage - 解析CallExpression 
wx.getUserProfile({
  desc: '展示用户信息',
  // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
  success: res => {
    console.log(res);
    this.setData({
      userInfo: res.userInfo,
      hasUserInfo: true
    });
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
console.log(res) 
INFO [taroize] parsePage - 解析CallExpression 
this.setData({
  userInfo: res.userInfo,
  hasUserInfo: true
}) 
INFO [taroize] parseScript - 解析Identifier 
Component 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
motto 
INFO [taroize] parseScript - 解析Identifier 
userInfo 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
defaultAvatarUrl 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
hasUserInfo 
INFO [taroize] parseScript - 解析Identifier 
canIUseGetUserProfile 
INFO [taroize] parseScript - 解析CallExpression 
Taro.canIUse('getUserProfile') 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
canIUse 
INFO [taroize] parseScript - 解析Identifier 
canIUseNicknameComp 
INFO [taroize] parseScript - 解析CallExpression 
Taro.canIUse('input.type.nickname') 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
canIUse 
INFO [taroize] parseScript - 解析Identifier 
methods 
INFO [taroize] parseScript - 解析Identifier 
bindViewTap 
INFO [taroize] parseScript - 解析BlockStatement 
{
  Taro.navigateTo({
    url: '../logs/logs'
  });
} 
INFO [taroize] parseScript - 解析CallExpression 
Taro.navigateTo({
  url: '../logs/logs'
}) 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
navigateTo 
INFO [taroize] parseScript - 解析Identifier 
url 
INFO [taroize] parseScript - 解析Identifier 
onChooseAvatar 
INFO [taroize] parseScript - 解析Identifier 
e 
INFO [taroize] parseScript - 解析BlockStatement 
{
  const {
    avatarUrl
  } = e.detail;
  const {
    nickName
  } = this.data.userInfo;
  this.setData({
    "userInfo.avatarUrl": avatarUrl,
    hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
  });
} 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
e 
INFO [taroize] parseScript - 解析Identifier 
detail 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
userInfo 
INFO [taroize] parseScript - 解析CallExpression 
this.setData({
  "userInfo.avatarUrl": avatarUrl,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taroize] parseScript - 解析Identifier 
setData 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
hasUserInfo 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
defaultAvatarUrl 
INFO [taroize] parseScript - 解析Identifier 
onInputChange 
INFO [taroize] parseScript - 解析Identifier 
e 
INFO [taroize] parseScript - 解析BlockStatement 
{
  const nickName = e.detail.value;
  const {
    avatarUrl
  } = this.data.userInfo;
  this.setData({
    "userInfo.nickName": nickName,
    hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
  });
} 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
e 
INFO [taroize] parseScript - 解析Identifier 
detail 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
userInfo 
INFO [taroize] parseScript - 解析CallExpression 
this.setData({
  "userInfo.nickName": nickName,
  hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl
}) 
INFO [taroize] parseScript - 解析Identifier 
setData 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
hasUserInfo 
INFO [taroize] parseScript - 解析Identifier 
nickName 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
avatarUrl 
INFO [taroize] parseScript - 解析Identifier 
defaultAvatarUrl 
INFO [taroize] parseScript - 解析Identifier 
getUserProfile 
INFO [taroize] parseScript - 解析BlockStatement 
{
  // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
  Taro.getUserProfile({
    desc: '展示用户信息',
    // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
    success: res => {
      console.log(res);
      this.setData({
        userInfo: res.userInfo,
        hasUserInfo: true
      });
    }
  });
} 
INFO [taroize] parseScript - 解析CallExpression 
Taro.getUserProfile({
  desc: '展示用户信息',
  // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
  success: res => {
    console.log(res);
    this.setData({
      userInfo: res.userInfo,
      hasUserInfo: true
    });
  }
}) 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
getUserProfile 
INFO [taroize] parseScript - 解析Identifier 
desc 
INFO [taroize] parseScript - 解析Identifier 
success 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析BlockStatement 
{
  console.log(res);
  this.setData({
    userInfo: res.userInfo,
    hasUserInfo: true
  });
} 
INFO [taroize] parseScript - 解析CallExpression 
console.log(res) 
INFO [taroize] parseScript - 解析Identifier 
console 
INFO [taroize] parseScript - 解析Identifier 
log 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析CallExpression 
this.setData({
  userInfo: res.userInfo,
  hasUserInfo: true
}) 
INFO [taroize] parseScript - 解析Identifier 
setData 
INFO [taroize] parseScript - 解析Identifier 
userInfo 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
userInfo 
INFO [taroize] parseScript - 解析Identifier 
hasUserInfo 
INFO [taroize] parse - 入参 
option: {"json":"{\"component\":true,\"styleIsolation\":\"apply-shared\"}","script":"\"use strict\";\nComponent({\n    options: {\n        multipleSlots: true // 在组件定义时的选项中启用多slot支持\n    },\n    /**\n     * 组件的属性列表\n     */\n    properties: {\n        extClass: {\n            type: String,\n            value: ''\n        },\n        title: {\n            type: String,\n            value: ''\n        },\n        background: {\n            type: String,\n            value: ''\n        },\n        color: {\n            type: String,\n            value: ''\n        },\n        back: {\n            type: Boolean,\n            value: true\n        },\n        loading: {\n            type: Boolean,\n            value: false\n        },\n        homeButton: {\n            type: Boolean,\n            value: false,\n        },\n        animated: {\n            // 显示隐藏的时候opacity动画效果\n            type: Boolean,\n            value: true\n        },\n        show: {\n            // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在\n            type: Boolean,\n            value: true,\n            observer: '_showChange'\n        },\n        // back为true的时候，返回的页面深度\n        delta: {\n            type: Number,\n            value: 1\n        },\n    },\n    /**\n     * 组件的初始数据\n     */\n    data: {\n        displayStyle: ''\n    },\n    lifetimes: {\n        attached() {\n            const rect = wx.getMenuButtonBoundingClientRect();\n            wx.getSystemInfo({\n                success: (res) => {\n                    const isAndroid = res.platform === 'android';\n                    const isDevtools = res.platform === 'devtools';\n                    this.setData({\n                        ios: !isAndroid,\n                        innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,\n                        leftWidth: `width: ${res.windowWidth - rect.left}px`,\n                        safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``\n                    });\n                }\n            });\n        },\n    },\n    /**\n     * 组件的方法列表\n     */\n    methods: {\n        _showChange(show) {\n            const animated = this.data.animated;\n            let displayStyle = '';\n            if (animated) {\n                displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;\n            }\n            else {\n                displayStyle = `display: ${show ? '' : 'none'}`;\n            }\n            this.setData({\n                displayStyle\n            });\n        },\n        back() {\n            const data = this.data;\n            if (data.delta) {\n                wx.navigateBack({\n                    delta: data.delta\n                });\n            }\n            this.triggerEvent('back', { delta: data.delta }, {});\n        }\n    },\n});\n","wxml":"<view class=\"weui-navigation-bar {{extClass}}\">\n  <view class=\"weui-navigation-bar__inner {{ios ? 'ios' : 'android'}}\" style=\"color: {{color}}; background: {{background}}; {{displayStyle}}; {{innerPaddingRight}}; {{safeAreaTop}};\">\n\n    <!-- 左侧按钮 -->\n    <view class='weui-navigation-bar__left' style=\"{{leftWidth}};\">\n      <block wx:if=\"{{back || homeButton}}\">\n        <!-- 返回上一页 -->\n        <block wx:if=\"{{back}}\">\n          <view class=\"weui-navigation-bar__buttons weui-navigation-bar__buttons_goback\">\n            <view\n              bindtap=\"back\"\n              class=\"weui-navigation-bar__btn_goback_wrapper\"\n              hover-class=\"weui-active\"\n              hover-stay-time=\"100\"\n              aria-role=\"button\"\n              aria-label=\"返回\"\n            >\n              <view class=\"weui-navigation-bar__button weui-navigation-bar__btn_goback\"></view>\n            </view>\n          </view>\n        </block>\n        <!-- 返回首页 -->\n        <block wx:if=\"{{homeButton}}\">\n          <view class=\"weui-navigation-bar__buttons weui-navigation-bar__buttons_home\">\n            <view\n              bindtap=\"home\"\n              class=\"weui-navigation-bar__btn_home_wrapper\"\n              hover-class=\"weui-active\"\n              aria-role=\"button\"\n              aria-label=\"首页\"\n            >\n              <view class=\"weui-navigation-bar__button weui-navigation-bar__btn_home\"></view>\n            </view>\n          </view>\n        </block>\n      </block>\n      <block wx:else>\n        <slot name=\"left\"></slot>\n      </block>\n    </view>\n\n    <!-- 标题 -->\n    <view class='weui-navigation-bar__center'>\n      <view wx:if=\"{{loading}}\" class=\"weui-navigation-bar__loading\" aria-role=\"alert\">\n        <view\n          class=\"weui-loading\"\n          aria-role=\"img\"\n          aria-label=\"加载中\"\n        ></view>\n      </view>\n      <block wx:if=\"{{title}}\">\n        <text>{{title}}</text>\n      </block>\n      <block wx:else>\n        <slot name=\"center\"></slot>\n      </block>\n    </view>\n    \n    <!-- 右侧留空 -->\n    <view class='weui-navigation-bar__right'>\n      <slot name=\"right\"></slot>\n    </view>\n  </view>\n</view>\n","path":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar","rootPath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram","logFilePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/taroConvert/.convert/convert.log","templatePath":"/Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar/navigation-bar.wxml","framework":"React"} 
INFO [taroize] parseWXML - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar 
parseImport: undefined 
INFO [taroize] parseNode - 入参 
tagName: undefined 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar {{extClass}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__inner {{ios ? 'ios' : 'android'}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"style","value":"color: {{color}}; background: {{background}}; {{displayStyle}}; {{innerPaddingRight}}; {{safeAreaTop}};"} 
INFO [taroize] parseStyle - 入参 
key: style 
value: color: {{color}}; background: {{background}}; {{displayStyle}}; {{innerPaddingRight}}; {{safeAreaTop}}; 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__left"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"style","value":"{{leftWidth}};"} 
INFO [taroize] parseStyle - 入参 
key: style 
value: {{leftWidth}}; 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{back || homeButton}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{back}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"bindtap","value":"back"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__btn_goback_wrapper"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"hover-class","value":"weui-active"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"hover-stay-time","value":"100"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-role","value":"button"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-label","value":"返回"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__button weui-navigation-bar__btn_goback"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{homeButton}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__buttons weui-navigation-bar__buttons_home"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"bindtap","value":"home"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__btn_home_wrapper"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"hover-class","value":"weui-active"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-role","value":"button"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-label","value":"首页"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__button weui-navigation-bar__btn_home"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:else","value":null} 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"name","value":"left"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__center"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{loading}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__loading"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-role","value":"alert"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-loading"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-role","value":"img"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"aria-label","value":"加载中"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:if","value":"{{title}}"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: text 
INFO [taroize] parseText - 进入函数 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"wx:else","value":null} 
INFO [taroize] parseNode - 入参 
tagName: block 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"name","value":"center"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"class","value":"weui-navigation-bar__right"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] parseNode - 入参 
tagName: view 
INFO [taroize] parseElement - 进入函数 
INFO [taroize] parseAttribute - 入参 
attr: {"key":"name","value":"right"} 
INFO [taroize] parseContent - 进入函数 
INFO [taroize] createPreWxmlVistor - 入参 
templates: [object Map] 
INFO [taroize] templateBfs - 进入函数 
INFO [taroize] createWxmlVistor - 入参 
dirPath: /Users/zolad/work/app/ctrip/fly/WeChatProjects/weixin-pages-convert/miniprogram/components/navigation-bar 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}><Block wx:if={back || homeButton}><Block wx:if={back}><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>{
            /*  返回首页  */
          }<Block wx:if={homeButton}><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block></Block><Block wx:else><Slot name="left"></Slot></Block></View>{
        /*  标题  */
      }<View className="weui-navigation-bar__center"><View wx:if={loading} className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View><Block wx:if={title}><Text>{title}</Text></Block><Block wx:else><Slot name="center"></Slot></Block></View>{
        /*  右侧留空  */
      }<View className="weui-navigation-bar__right"><Slot name="right"></Slot></View></View></View></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar " + extClass} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={leftWidth + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={back || homeButton} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={back} 
WARN [taroize] transformIf - 节点过滤异常 
TypeError: Cannot read properties of null (reading '1') 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
wx:if 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={homeButton} 
WARN [taroize] transformIf - 节点过滤异常 
TypeError: Cannot read properties of null (reading '3') 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
wx:if 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={homeButton} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={loading} 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
wx:if={title} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className={"weui-navigation-bar " + extClass}><View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
          /*  返回首页  */
        }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block><Slot name="left"></Slot></Block>}</View>{
      /*  标题  */
    }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block><Slot name="center"></Slot></Block>}</View>{
      /*  右侧留空  */
    }<View className="weui-navigation-bar__right"><Slot name="right"></Slot></View></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar " + extClass} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={leftWidth + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar " + extClass} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
extClass 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"}><View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
        /*  返回首页  */
      }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block><Slot name="left"></Slot></Block>}</View>{
    /*  标题  */
  }<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block><Slot name="center"></Slot></Block>}</View>{
    /*  右侧留空  */
  }<View className="weui-navigation-bar__right"><Slot name="right"></Slot></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={leftWidth + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className={"weui-navigation-bar__inner " + (ios ? 'ios' : 'android')} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
ios 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={"color: " + color + "; background: " + background + "; " + displayStyle + "; " + innerPaddingRight + "; " + safeAreaTop + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析Identifier 
color 
INFO [taroize] createWxmlVistor - 解析Identifier 
background 
INFO [taroize] createWxmlVistor - 解析Identifier 
displayStyle 
INFO [taroize] createWxmlVistor - 解析Identifier 
innerPaddingRight 
INFO [taroize] createWxmlVistor - 解析Identifier 
safeAreaTop 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__left" style={leftWidth + ";"}>{back || homeButton ? <Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
      /*  返回首页  */
    }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> : <Block><Slot name="left"></Slot></Block>}</View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={leftWidth + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
style={leftWidth + ";"} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
style 
INFO [taroize] createWxmlVistor - 解析Identifier 
leftWidth 
INFO [taroize] createWxmlVistor - 解析Identifier 
back 
INFO [taroize] createWxmlVistor - 解析Identifier 
homeButton 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block>{back && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block>}{
    /*  返回首页  */
  }{homeButton && <Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block>}</Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析Identifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback"><View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View onClick={this.back} className="weui-navigation-bar__btn_goback_wrapper" hoverClass="weui-active" hoverStayTime="100" ariaRole="button" ariaLabel="\u8FD4\u56DE"><View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.back} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析Identifier 
back 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_goback_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverStayTime="100" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverStayTime 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u8FD4\u56DE" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__button weui-navigation-bar__btn_goback"></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_goback" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析Identifier 
homeButton 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home"><View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__buttons weui-navigation-bar__buttons_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View onClick={this.home} className="weui-navigation-bar__btn_home_wrapper" hoverClass="weui-active" ariaRole="button" ariaLabel="\u9996\u9875"><View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
onClick={this.home} 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
onClick 
INFO [taroize] createWxmlVistor - 解析Identifier 
home 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__btn_home_wrapper" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
hoverClass="weui-active" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
hoverClass 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="button" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u9996\u9875" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__button weui-navigation-bar__btn_home"></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__button weui-navigation-bar__btn_home" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><Slot name="left"></Slot></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Slot name="left"></Slot> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="left" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - tagName: Slot 
INFO [taroize] createWxmlVistor - 解析Identifier 
props 
INFO [taroize] createWxmlVistor - 解析Identifier 
renderLeft 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__center">{loading && <View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View>}{title ? <Block><Text>{title}</Text></Block> : <Block><Slot name="center"></Slot></Block>}</View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析Identifier 
loading 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__loading" ariaRole="alert"><View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="alert" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-loading" ariaRole="img" ariaLabel="\u52A0\u8F7D\u4E2D"></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-loading" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaRole="img" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaRole 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
ariaLabel="\u52A0\u8F7D\u4E2D" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
ariaLabel 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析Identifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><Text>{title}</Text></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Text>{title}</Text> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析Identifier 
title 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Text 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Block><Slot name="center"></Slot></Block> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Slot name="center"></Slot> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="center" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - tagName: Slot 
INFO [taroize] createWxmlVistor - 解析Identifier 
props 
INFO [taroize] createWxmlVistor - 解析Identifier 
renderCenter 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<View className="weui-navigation-bar__right"><Slot name="right"></Slot></View> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
className="weui-navigation-bar__right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
className 
INFO [taroize] createWxmlVistor - 解析JSXElement 
<Slot name="right"></Slot> 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - 解析JSXAttribute 
name="right" 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
name 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Slot 
INFO [taroize] createWxmlVistor - tagName: Slot 
INFO [taroize] createWxmlVistor - 解析Identifier 
props 
INFO [taroize] createWxmlVistor - 解析Identifier 
renderRight 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
View 
INFO [taroize] createWxmlVistor - 解析JSXIdentifier 
Block 
INFO [taroize] parseScript - 入参 
scriptPath: undefined 
INFO [taroize] parseCode - 入参
scriptPath: undefined 
INFO [taroize] parseScript - 解析CallExpression 
Component({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    }
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = wx.getMenuButtonBoundingClientRect();
      wx.getSystemInfo({
        success: res => {
          const isAndroid = res.platform === 'android';
          const isDevtools = res.platform === 'devtools';
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left}px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          });
        }
      });
    }
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show) {
      const animated = this.data.animated;
      let displayStyle = '';
      if (animated) {
        displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`;
      }
      this.setData({
        displayStyle
      });
    },
    back() {
      const data = this.data;
      if (data.delta) {
        wx.navigateBack({
          delta: data.delta
        });
      }
      this.triggerEvent('back', {
        delta: data.delta
      }, {});
    }
  }
}) 
INFO [taroize] parsePage - 入参 
pagePath: Component({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    }
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = wx.getMenuButtonBoundingClientRect();
      wx.getSystemInfo({
        success: res => {
          const isAndroid = res.platform === 'android';
          const isDevtools = res.platform === 'devtools';
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left}px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          });
        }
      });
    }
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show) {
      const animated = this.data.animated;
      let displayStyle = '';
      if (animated) {
        displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`;
      }
      this.setData({
        displayStyle
      });
    },
    back() {
      const data = this.data;
      if (data.delta) {
        wx.navigateBack({
          delta: data.delta
        });
      }
      this.triggerEvent('back', {
        delta: data.delta
      }, {});
    }
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
wx.getMenuButtonBoundingClientRect() 
INFO [taroize] parsePage - 解析CallExpression 
wx.getSystemInfo({
  success: res => {
    const isAndroid = res.platform === 'android';
    const isDevtools = res.platform === 'devtools';
    this.setData({
      ios: !isAndroid,
      innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
      leftWidth: `width: ${res.windowWidth - rect.left}px`,
      safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
    });
  }
}) 
INFO [taroize] parsePage - 解析CallExpression 
this.setData({
  ios: !isAndroid,
  innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
  leftWidth: `width: ${res.windowWidth - rect.left}px`,
  safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
}) 
INFO [taroize] parsePage - 解析CallExpression 
this.setData({
  displayStyle
}) 
INFO [taroize] parsePage - 解析CallExpression 
wx.navigateBack({
  delta: data.delta
}) 
INFO [taroize] parsePage - 解析CallExpression 
this.triggerEvent('back', {
  delta: data.delta
}, {}) 
INFO [taroize] parseScript - 解析Identifier 
Component 
INFO [taroize] parseScript - 解析Identifier 
options 
INFO [taroize] parseScript - 解析Identifier 
multipleSlots 
INFO [taroize] parseScript - 解析Identifier 
properties 
INFO [taroize] parseScript - 解析Identifier 
extClass 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
String 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
title 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
String 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
background 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
String 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
color 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
String 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
back 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
Boolean 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
loading 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
Boolean 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
homeButton 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
Boolean 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
animated 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
Boolean 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
show 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
Boolean 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
observer 
INFO [taroize] parseScript - 解析Identifier 
delta 
INFO [taroize] parseScript - 解析Identifier 
type 
INFO [taroize] parseScript - 解析Identifier 
Number 
INFO [taroize] parseScript - 解析Identifier 
value 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
displayStyle 
INFO [taroize] parseScript - 解析Identifier 
lifetimes 
INFO [taroize] parseScript - 解析Identifier 
attached 
INFO [taroize] parseScript - 解析BlockStatement 
{
  const rect = Taro.getMenuButtonBoundingClientRect();
  Taro.getSystemInfo({
    success: res => {
      const isAndroid = res.platform === 'android';
      const isDevtools = res.platform === 'devtools';
      this.setData({
        ios: !isAndroid,
        innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
        leftWidth: `width: ${res.windowWidth - rect.left}px`,
        safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
      });
    }
  });
} 
INFO [taroize] parseScript - 解析Identifier 
rect 
INFO [taroize] parseScript - 解析CallExpression 
Taro.getMenuButtonBoundingClientRect() 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
getMenuButtonBoundingClientRect 
INFO [taroize] parseScript - 解析CallExpression 
Taro.getSystemInfo({
  success: res => {
    const isAndroid = res.platform === 'android';
    const isDevtools = res.platform === 'devtools';
    this.setData({
      ios: !isAndroid,
      innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
      leftWidth: `width: ${res.windowWidth - rect.left}px`,
      safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
    });
  }
}) 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
getSystemInfo 
INFO [taroize] parseScript - 解析Identifier 
success 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析BlockStatement 
{
  const isAndroid = res.platform === 'android';
  const isDevtools = res.platform === 'devtools';
  this.setData({
    ios: !isAndroid,
    innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
    leftWidth: `width: ${res.windowWidth - rect.left}px`,
    safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
  });
} 
INFO [taroize] parseScript - 解析Identifier 
isAndroid 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
platform 
INFO [taroize] parseScript - 解析Identifier 
isDevtools 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
platform 
INFO [taroize] parseScript - 解析CallExpression 
this.setData({
  ios: !isAndroid,
  innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
  leftWidth: `width: ${res.windowWidth - rect.left}px`,
  safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
}) 
INFO [taroize] parseScript - 解析Identifier 
setData 
INFO [taroize] parseScript - 解析Identifier 
ios 
INFO [taroize] parseScript - 解析Identifier 
isAndroid 
INFO [taroize] parseScript - 解析Identifier 
innerPaddingRight 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
windowWidth 
INFO [taroize] parseScript - 解析Identifier 
rect 
INFO [taroize] parseScript - 解析Identifier 
left 
INFO [taroize] parseScript - 解析Identifier 
leftWidth 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
windowWidth 
INFO [taroize] parseScript - 解析Identifier 
rect 
INFO [taroize] parseScript - 解析Identifier 
left 
INFO [taroize] parseScript - 解析Identifier 
safeAreaTop 
INFO [taroize] parseScript - 解析Identifier 
isDevtools 
INFO [taroize] parseScript - 解析Identifier 
isAndroid 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
safeArea 
INFO [taroize] parseScript - 解析Identifier 
top 
INFO [taroize] parseScript - 解析Identifier 
res 
INFO [taroize] parseScript - 解析Identifier 
safeArea 
INFO [taroize] parseScript - 解析Identifier 
top 
INFO [taroize] parseScript - 解析Identifier 
methods 
INFO [taroize] parseScript - 解析Identifier 
_showChange 
INFO [taroize] parseScript - 解析Identifier 
show 
INFO [taroize] parseScript - 解析BlockStatement 
{
  const animated = this.data.animated;
  let displayStyle = '';
  if (animated) {
    displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
  } else {
    displayStyle = `display: ${show ? '' : 'none'}`;
  }
  this.setData({
    displayStyle
  });
} 
INFO [taroize] parseScript - 解析Identifier 
animated 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
animated 
INFO [taroize] parseScript - 解析Identifier 
displayStyle 
INFO [taroize] parseScript - 解析Identifier 
animated 
INFO [taroize] parseScript - 解析BlockStatement 
{
  displayStyle = `opacity: ${show ? '1' : '0'};transition:opacity 0.5s;`;
} 
INFO [taroize] parseScript - 解析Identifier 
displayStyle 
INFO [taroize] parseScript - 解析Identifier 
show 
INFO [taroize] parseScript - 解析BlockStatement 
{
  displayStyle = `display: ${show ? '' : 'none'}`;
} 
INFO [taroize] parseScript - 解析Identifier 
displayStyle 
INFO [taroize] parseScript - 解析Identifier 
show 
INFO [taroize] parseScript - 解析CallExpression 
this.setData({
  displayStyle
}) 
INFO [taroize] parseScript - 解析Identifier 
setData 
INFO [taroize] parseScript - 解析Identifier 
displayStyle 
INFO [taroize] parseScript - 解析Identifier 
displayStyle 
INFO [taroize] parseScript - 解析Identifier 
back 
INFO [taroize] parseScript - 解析BlockStatement 
{
  const data = this.data;
  if (data.delta) {
    Taro.navigateBack({
      delta: data.delta
    });
  }
  this.triggerEvent('back', {
    delta: data.delta
  }, {});
} 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
delta 
INFO [taroize] parseScript - 解析BlockStatement 
{
  Taro.navigateBack({
    delta: data.delta
  });
} 
INFO [taroize] parseScript - 解析CallExpression 
Taro.navigateBack({
  delta: data.delta
}) 
INFO [taroize] parseScript - 解析Identifier 
Taro 
INFO [taroize] parseScript - 解析Identifier 
navigateBack 
INFO [taroize] parseScript - 解析Identifier 
delta 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
delta 
INFO [taroize] parseScript - 解析CallExpression 
this.triggerEvent('back', {
  delta: data.delta
}, {}) 
INFO [taroize] parseScript - 解析Identifier 
triggerEvent 
INFO [taroize] parseScript - 解析Identifier 
delta 
INFO [taroize] parseScript - 解析Identifier 
data 
INFO [taroize] parseScript - 解析Identifier 
delta 
